package com.raoul.walkfoframe.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.raoul.walkfoframe.model.HonoreesandStar;
import com.raoul.walkfoframe.database.DaoSession;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;



// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table HONOREESANDSTAR.
*/
public class HonoreesandStarDao extends AbstractDao<HonoreesandStar, String> {
    public static final String TABLENAME = "HONOREESANDSTAR";
    /**
     * Properties of entity honoreesandstar.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property HonoreeID = new Property(0, String.class, "honoreeID", true, "HONOREE_ID");
        public final static Property BioThumbnail = new Property(1, String.class, "bioThumbnail", false, "BIO_THUMBNAIL");
        public final static Property Biography = new Property(2, String.class, "biography", false, "BIOGRAPHY");
        public final static Property BirthCity = new Property(3, String.class, "birthCity", false, "BIRTH_CITY");
        public final static Property BirthState = new Property(4, String.class, "birthState", false, "BIRTH_STATE");
        public final static Property BirthCountry = new Property(5, String.class, "birthCountry", false, "BIRTH_COUNTRY");
        public final static Property BirthDate = new Property(6, String.class, "birthDate", false, "BIRTH_DATE");
        public final static Property CreatedTimeStamp = new Property(7, String.class, "createdTimeStamp", false, "CREATED_TIME_STAMP");
        public final static Property DeathCity = new Property(8, String.class, "deathCity", false, "DEATH_CITY");
        public final static Property DeathState = new Property(9, String.class, "deathState", false, "DEATH_STATE");
        public final static Property Education = new Property(10, String.class, "education", false, "EDUCATION");
        public final static Property Ethnicity = new Property(11, String.class, "ethnicity", false, "ETHNICITY");
        public final static Property InductionDate = new Property(12, String.class, "inductionDate", false, "INDUCTION_DATE");
        public final static Property FullName = new Property(13, String.class, "fullName", false, "FULL_NAME");
        public final static Property NameFullFirst = new Property(14, String.class, "nameFullFirst", false, "NAME_FULL_FIRST");
        public final static Property NameFullFirstLetter = new Property(15, String.class, "nameFullFirstLetter", false, "NAME_FULL_FIRST_LETTER");
        public final static Property NameFullLast = new Property(16, String.class, "nameFullLast", false, "NAME_FULL_LAST");
        public final static Property StarID = new Property(17, Integer.class, "starID", false, "STAR_ID");
        public final static Property StreetNo = new Property(18, String.class, "streetNo", false, "STREET_NO");
        public final static Property StreetName = new Property(19, String.class, "streetName", false, "STREET_NAME");
        public final static Property Longitude = new Property(20, String.class, "longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(21, String.class, "latitude", false, "LATITUDE");
        public final static Property HonoreeFullName = new Property(22, String.class, "honoreeFullName", false, "HONOREE_FULL_NAME");
        public final static Property CeremonyDate = new Property(23, String.class, "ceremonyDate", false, "CEREMONY_DATE");
        public final static Property Category = new Property(24, String.class, "category", false, "CATEGORY");
        public final static Property Isfavorite = new Property(25, String.class, "isfavorite", false, "ISFAVORITE");
    };


    public HonoreesandStarDao(DaoConfig config) {
        super(config);
    }
    
    public HonoreesandStarDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'HONOREESANDSTAR' (" + //
                "'HONOREE_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: honoreeID
                "'BIO_THUMBNAIL' TEXT," + // 1: bioThumbnail
                "'BIOGRAPHY' TEXT," + // 2: biography
                "'BIRTH_CITY' TEXT," + // 3: birthCity
                "'BIRTH_STATE' TEXT," + // 4: birthState
                "'BIRTH_COUNTRY' TEXT," + // 5: birthCountry
                "'BIRTH_DATE' TEXT," + // 6: birthDate
                "'CREATED_TIME_STAMP' TEXT," + // 7: createdTimeStamp
                "'DEATH_CITY' TEXT," + // 8: deathCity
                "'DEATH_STATE' TEXT," + // 9: deathState
                "'EDUCATION' TEXT," + // 10: education
                "'ETHNICITY' TEXT," + // 11: ethnicity
                "'INDUCTION_DATE' TEXT," + // 12: inductionDate
                "'FULL_NAME' TEXT," + // 13: fullName
                "'NAME_FULL_FIRST' TEXT," + // 14: nameFullFirst
                "'NAME_FULL_FIRST_LETTER' TEXT," + // 15: nameFullFirstLetter
                "'NAME_FULL_LAST' TEXT," + // 16: nameFullLast
                "'STAR_ID' INTEGER," + // 17: starID
                "'STREET_NO' TEXT," + // 18: streetNo
                "'STREET_NAME' TEXT," + // 19: streetName
                "'LONGITUDE' TEXT," + // 20: longitude
                "'LATITUDE' TEXT," + // 21: latitude
                "'HONOREE_FULL_NAME' TEXT," + // 22: honoreeFullName
                "'CEREMONY_DATE' TEXT," + // 23: ceremonyDate
                "'CATEGORY' TEXT," + // 24: category
                "'ISFAVORITE' TEXT);"); // 25: isfavorite
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'HONOREESANDSTAR'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, HonoreesandStar entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getHonoreeID());
 
        String bioThumbnail = entity.getBioThumbnail();
        if (bioThumbnail != null) {
            stmt.bindString(2, bioThumbnail);
        }
 
        String biography = entity.getBiography();
        if (biography != null) {
            stmt.bindString(3, biography);
        }
 
        String birthCity = entity.getBirthCity();
        if (birthCity != null) {
            stmt.bindString(4, birthCity);
        }
 
        String birthState = entity.getBirthState();
        if (birthState != null) {
            stmt.bindString(5, birthState);
        }
 
        String birthCountry = entity.getBirthCountry();
        if (birthCountry != null) {
            stmt.bindString(6, birthCountry);
        }
 
        String birthDate = entity.getBirthDate();
        if (birthDate != null) {
            stmt.bindString(7, birthDate);
        }
 
        String createdTimeStamp = entity.getCreatedTimeStamp();
        if (createdTimeStamp != null) {
            stmt.bindString(8, createdTimeStamp);
        }
 
        String deathCity = entity.getDeathCity();
        if (deathCity != null) {
            stmt.bindString(9, deathCity);
        }
 
        String deathState = entity.getDeathState();
        if (deathState != null) {
            stmt.bindString(10, deathState);
        }
 
        String education = entity.getEducation();
        if (education != null) {
            stmt.bindString(11, education);
        }
 
        String ethnicity = entity.getEthnicity();
        if (ethnicity != null) {
            stmt.bindString(12, ethnicity);
        }
 
        String inductionDate = entity.getInductionDate();
        if (inductionDate != null) {
            stmt.bindString(13, inductionDate);
        }
 
        String fullName = entity.getFullName();
        if (fullName != null) {
            stmt.bindString(14, fullName);
        }
 
        String nameFullFirst = entity.getNameFullFirst();
        if (nameFullFirst != null) {
            stmt.bindString(15, nameFullFirst);
        }
 
        String nameFullFirstLetter = entity.getNameFullFirstLetter();
        if (nameFullFirstLetter != null) {
            stmt.bindString(16, nameFullFirstLetter);
        }
 
        String nameFullLast = entity.getNameFullLast();
        if (nameFullLast != null) {
            stmt.bindString(17, nameFullLast);
        }
 
        Integer starID = entity.getStarID();
        if (starID != null) {
            stmt.bindLong(18, starID);
        }
 
        String streetNo = entity.getStreetNo();
        if (streetNo != null) {
            stmt.bindString(19, streetNo);
        }
 
        String streetName = entity.getStreetName();
        if (streetName != null) {
            stmt.bindString(20, streetName);
        }
 
        String longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindString(21, longitude);
        }
 
        String latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindString(22, latitude);
        }
 
        String honoreeFullName = entity.getHonoreeFullName();
        if (honoreeFullName != null) {
            stmt.bindString(23, honoreeFullName);
        }
 
        String ceremonyDate = entity.getCeremonyDate();
        if (ceremonyDate != null) {
            stmt.bindString(24, ceremonyDate);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(25, category);
        }
 
        String isfavorite = entity.getIsfavorite();
        if (isfavorite != null) {
            stmt.bindString(26, isfavorite);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public HonoreesandStar readEntity(Cursor cursor, int offset) {
        HonoreesandStar entity = new HonoreesandStar( //
            cursor.getString(offset + 0), // honoreeID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bioThumbnail
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // biography
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // birthCity
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // birthState
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // birthCountry
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // birthDate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // createdTimeStamp
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // deathCity
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // deathState
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // education
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // ethnicity
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // inductionDate
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // fullName
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // nameFullFirst
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // nameFullFirstLetter
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // nameFullLast
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // starID
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // streetNo
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // streetName
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // longitude
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // latitude
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // honoreeFullName
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // ceremonyDate
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // category
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25) // isfavorite
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, HonoreesandStar entity, int offset) {
        entity.setHonoreeID(cursor.getString(offset + 0));
        entity.setBioThumbnail(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBiography(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBirthCity(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBirthState(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBirthCountry(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBirthDate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCreatedTimeStamp(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDeathCity(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDeathState(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setEducation(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setEthnicity(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setInductionDate(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setFullName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setNameFullFirst(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setNameFullFirstLetter(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setNameFullLast(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setStarID(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setStreetNo(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setStreetName(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setLongitude(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setLatitude(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setHonoreeFullName(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setCeremonyDate(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setCategory(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setIsfavorite(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(HonoreesandStar entity, long rowId) {
        return entity.getHonoreeID();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(HonoreesandStar entity) {
        if(entity != null) {
            return entity.getHonoreeID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
