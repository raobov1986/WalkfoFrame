package com.raoul.walkfoframe.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.raoul.walkfoframe.model.WOFControl;
import com.raoul.walkfoframe.database.DaoSession;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table WOFCONTROL.
*/
public class WOFControlDao extends AbstractDao<WOFControl, Void> {

    public static final String TABLENAME = "WOFCONTROL";

    /**
     * Properties of entity WOFControl.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ControlID = new Property(0, Integer.class, "controlID", false, "CONTROL_ID");
        public final static Property Challenges = new Property(1, Integer.class, "challenges", false, "CHALLENGES");
        public final static Property ForceDownload = new Property(2, Integer.class, "forceDownload", false, "FORCE_DOWNLOAD");
        public final static Property Honorees = new Property(3, Integer.class, "honorees", false, "HONOREES");
        public final static Property Media = new Property(4, Integer.class, "media", false, "MEDIA");
        public final static Property Questions = new Property(5, Integer.class, "questions", false, "QUESTIONS");
        public final static Property Quizzes = new Property(6, Integer.class, "quizzes", false, "QUIZZES");
        public final static Property Stars = new Property(7, Integer.class, "stars", false, "STARS");
        public final static Property Hunts = new Property(8, String.class, "hunts", false, "HUNTS");
    };


    public WOFControlDao(DaoConfig config) {
        super(config);
    }
    
    public WOFControlDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'WOFCONTROL' (" + //
                "'CONTROL_ID' INTEGER," + // 0: controlID
                "'CHALLENGES' INTEGER," + // 1: challenges
                "'FORCE_DOWNLOAD' INTEGER," + // 2: forceDownload
                "'HONOREES' INTEGER," + // 3: honorees
                "'MEDIA' INTEGER," + // 4: media
                "'QUESTIONS' INTEGER," + // 5: questions
                "'QUIZZES' INTEGER," + // 6: quizzes
                "'STARS' INTEGER," + // 7: stars
                "'HUNTS' TEXT);"); // 8: hunts
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'WOFCONTROL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, WOFControl entity) {
        stmt.clearBindings();
 
        Integer controlID = entity.getControlID();
        if (controlID != null) {
            stmt.bindLong(1, controlID);
        }
 
        Integer challenges = entity.getChallenges();
        if (challenges != null) {
            stmt.bindLong(2, challenges);
        }
 
        Integer forceDownload = entity.getForceDownload();
        if (forceDownload != null) {
            stmt.bindLong(3, forceDownload);
        }
 
        Integer honorees = entity.getHonorees();
        if (honorees != null) {
            stmt.bindLong(4, honorees);
        }
 
        Integer media = entity.getMedia();
        if (media != null) {
            stmt.bindLong(5, media);
        }
 
        Integer questions = entity.getQuestions();
        if (questions != null) {
            stmt.bindLong(6, questions);
        }
 
        Integer quizzes = entity.getQuizzes();
        if (quizzes != null) {
            stmt.bindLong(7, quizzes);
        }
 
        Integer stars = entity.getStars();
        if (stars != null) {
            stmt.bindLong(8, stars);
        }
 
        String hunts = entity.getHunts();
        if (hunts != null) {
            stmt.bindString(9, hunts);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public WOFControl readEntity(Cursor cursor, int offset) {
        WOFControl entity = new WOFControl( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // controlID
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // challenges
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // forceDownload
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // honorees
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // media
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // questions
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // quizzes
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // stars
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // hunts
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, WOFControl entity, int offset) {
        entity.setControlID(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setChallenges(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setForceDownload(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setHonorees(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setMedia(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setQuestions(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setQuizzes(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setStars(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setHunts(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(WOFControl entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(WOFControl entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
