package com.raoul.walkfoframe.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.raoul.walkfoframe.model.WOFMedia;
import com.raoul.walkfoframe.database.DaoSession;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;



// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table WOFMEDIA.
 */
public class WOFMediaDao extends AbstractDao<WOFMedia, Void> {

	public static final String TABLENAME = "WOFMEDIA";

	/**
	 * Properties of entity WOFMedia.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property StarID = new Property(0, Integer.class,
				"starID", false, "STAR_ID");
		public final static Property HonoreeID = new Property(1, Integer.class,
				"honoreeID", false, "HONOREE_ID");
		public final static Property ContentLength = new Property(2,
				Integer.class, "contentLength", false, "CONTENT_LENGTH");
		public final static Property MediaType = new Property(3, Integer.class,
				"mediaType", false, "MEDIA_TYPE");
		public final static Property PlayPreview = new Property(4,
				String.class, "playPreview", false, "PLAY_PREVIEW");
		public final static Property MediaName = new Property(5, String.class,
				"mediaName", false, "MEDIA_NAME");
		public final static Property MediaNotes = new Property(6, String.class,
				"mediaNotes", false, "MEDIA_NOTES");
		public final static Property MediaURL = new Property(7, String.class,
				"mediaURL", false, "MEDIA_URL");
		public final static Property PreviewTimeOut = new Property(8,
				String.class, "previewTimeOut", false, "PREVIEW_TIME_OUT");
		public final static Property PreviewTimeIn = new Property(9,
				String.class, "previewTimeIn", false, "PREVIEW_TIME_IN");
		public final static Property ThumbnailURL = new Property(10,
				String.class, "thumbnailURL", false, "THUMBNAIL_URL");
		public final static Property AccessLevel = new Property(11,
				Integer.class, "accessLevel", false, "ACCESS_LEVEL");
		public final static Property MediaID = new Property(12,
				Integer.class, "mediaID", false, "MEDIA_ID");
	};

	public WOFMediaDao(DaoConfig config) {
		super(config);
	}

	public WOFMediaDao(DaoConfig config, DaoSession daoSession) {
		super(config, daoSession);
	}

	/** Creates the underlying database table. */
	public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "'WOFMEDIA' (" + //
				"'STAR_ID' INTEGER," + // 0: starID
				"'HONOREE_ID' INTEGER," + // 1: honoreeID
				"'CONTENT_LENGTH' INTEGER," + // 2: contentLength
				"'MEDIA_TYPE' INTEGER," + // 3: mediaType
				"'PLAY_PREVIEW' TEXT," + // 4: playPreview
				"'MEDIA_NAME' TEXT," + // 5: mediaName
				"'MEDIA_NOTES' TEXT," + // 6: mediaNotes
				"'MEDIA_URL' TEXT," + // 7: mediaURL
				"'PREVIEW_TIME_OUT' TEXT," + // 8: previewTimeOut
				"'PREVIEW_TIME_IN' TEXT," + // 9: previewTimeIn
				"'THUMBNAIL_URL' TEXT, " +	// 10: thumbnailURL
				"'ACCESS_LEVEL' INTEGER, " + // 11: access level
				"'MEDIA_ID' INTEGER);"); // 12: media id
	}

	/** Drops the underlying database table. */
	public static void dropTable(SQLiteDatabase db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "")
				+ "'WOFMEDIA'";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt, WOFMedia entity) {
		stmt.clearBindings();

		Integer starID = entity.getStarID();
		if (starID != null) {
			stmt.bindLong(1, starID);
		}

		Integer honoreeID = entity.getHonoreeID();
		if (honoreeID != null) {
			stmt.bindLong(2, honoreeID);
		}

		Integer contentLength = entity.getContentLength();
		if (contentLength != null) {
			stmt.bindLong(3, contentLength);
		}

		Integer mediaType = entity.getMediaType();
		if (mediaType != null) {
			stmt.bindLong(4, mediaType);
		}

		String playPreview = entity.getPlayPreview();
		if (playPreview != null) {
			stmt.bindString(5, playPreview);
		}

		String mediaName = entity.getMediaName();
		if (mediaName != null) {
			stmt.bindString(6, mediaName);
		}

		String mediaNotes = entity.getMediaNotes();
		if (mediaNotes != null) {
			stmt.bindString(7, mediaNotes);
		}

		String mediaURL = entity.getMediaURL();
		if (mediaURL != null) {
			stmt.bindString(8, mediaURL);
		}

		String previewTimeOut = entity.getPreviewTimeOut();
		if (previewTimeOut != null) {
			stmt.bindString(9, previewTimeOut);
		}

		String previewTimeIn = entity.getPreviewTimeIn();
		if (previewTimeIn != null) {
			stmt.bindString(10, previewTimeIn);
		}

		String thumbnailURL = entity.getThumbnailURL();
		if (thumbnailURL != null) {
			stmt.bindString(11, thumbnailURL);
		}
		
		Integer accessLevel = entity.getAccessLevel();
		if (accessLevel != null) {
			stmt.bindLong(12, accessLevel);
		}
		
		Integer mediaID = entity.getMediaID();
		if (mediaID != null) {
			stmt.bindLong(13, mediaID);
		}
	}

	/** @inheritdoc */
	@Override
	public Void readKey(Cursor cursor, int offset) {
		return null;
	}

	/** @inheritdoc */
	@Override
	public WOFMedia readEntity(Cursor cursor, int offset) {
		WOFMedia entity = new WOFMedia(
				//
				cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // starID
				cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // honoreeID
				cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // contentLength
				cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // mediaType
				cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // playPreview
				cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // mediaName
				cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // mediaNotes
				cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // mediaURL
				cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // previewTimeOut
				cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // previewTimeIn
				cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // thumbnailURL
				cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // accessLevel
				cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12) // media id
		);
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, WOFMedia entity, int offset) {
		entity.setStarID(cursor.isNull(offset + 0) ? null : cursor
				.getInt(offset + 0));
		entity.setHonoreeID(cursor.isNull(offset + 1) ? null : cursor
				.getInt(offset + 1));
		entity.setContentLength(cursor.isNull(offset + 2) ? null : cursor
				.getInt(offset + 2));
		entity.setMediaType(cursor.isNull(offset + 3) ? null : cursor
				.getInt(offset + 3));
		entity.setPlayPreview(cursor.isNull(offset + 4) ? null : cursor
				.getString(offset + 4));
		entity.setMediaName(cursor.isNull(offset + 5) ? null : cursor
				.getString(offset + 5));
		entity.setMediaNotes(cursor.isNull(offset + 6) ? null : cursor
				.getString(offset + 6));
		entity.setMediaURL(cursor.isNull(offset + 7) ? null : cursor
				.getString(offset + 7));
		entity.setPreviewTimeOut(cursor.isNull(offset + 8) ? null : cursor
				.getString(offset + 8));
		entity.setPreviewTimeIn(cursor.isNull(offset + 9) ? null : cursor
				.getString(offset + 9));
		entity.setThumbnailURL(cursor.isNull(offset + 10) ? null : cursor
				.getString(offset + 10));
		entity.setAccessLevel(cursor.isNull(offset + 11) ? null : cursor
				.getInt(offset + 11));
		entity.setMediaID(cursor.isNull(offset + 12) ? null : cursor
				.getInt(offset + 12));
	}

	/** @inheritdoc */
	@Override
	protected Void updateKeyAfterInsert(WOFMedia entity, long rowId) {
		// Unsupported or missing PK type
		return null;
	}

	/** @inheritdoc */
	@Override
	public Void getKey(WOFMedia entity) {
		return null;
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

}
