package com.raoul.walkfoframe.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.raoul.walkfoframe.model.Quizzes;
import com.raoul.walkfoframe.database.DaoSession;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;



// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table QUIZZES.
*/
public class QuizzesDao extends AbstractDao<Quizzes, Void> {

    public static final String TABLENAME = "QUIZZES";

    /**
     * Properties of entity Quizzes.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property QuizID = new Property(0, Integer.class, "quizID", false, "QUIZ_ID");
        public final static Property QuizCategory = new Property(1, String.class, "quizCategory", false, "QUIZ_CATEGORY");
        public final static Property QuizName = new Property(2, String.class, "quizName", false, "QUIZ_NAME");
    };


    public QuizzesDao(DaoConfig config) {
        super(config);
    }
    
    public QuizzesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'QUIZZES' (" + //
                "'QUIZ_ID' INTEGER," + // 0: quizID
                "'QUIZ_CATEGORY' TEXT," + // 1: quizCategory
                "'QUIZ_NAME' TEXT);"); // 2: quizName
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'QUIZZES'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Quizzes entity) {
        stmt.clearBindings();
 
        Integer quizID = entity.getQuizID();
        if (quizID != null) {
            stmt.bindLong(1, quizID);
        }
 
        String quizCategory = entity.getQuizCategory();
        if (quizCategory != null) {
            stmt.bindString(2, quizCategory);
        }
 
        String quizName = entity.getQuizName();
        if (quizName != null) {
            stmt.bindString(3, quizName);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Quizzes readEntity(Cursor cursor, int offset) {
        Quizzes entity = new Quizzes( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // quizID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // quizCategory
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // quizName
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Quizzes entity, int offset) {
        entity.setQuizID(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setQuizCategory(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setQuizName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Quizzes entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Quizzes entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
