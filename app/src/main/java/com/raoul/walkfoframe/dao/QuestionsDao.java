package com.raoul.walkfoframe.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.raoul.walkfoframe.model.Questions;
import com.raoul.walkfoframe.database.DaoSession;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table QUESTIONS.
 */
public class QuestionsDao extends AbstractDao<Questions, Void> {

	public static final String TABLENAME = "QUESTIONS";

	/**
	 * Properties of entity Questions.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property StarID = new Property(0, Integer.class,
				"starID", false, "STAR_ID");
		public final static Property Answer = new Property(1, Integer.class,
				"answer", false, "ANSWER");
		public final static Property QuizID = new Property(2, Integer.class,
				"quizID", false, "QUIZ_ID");
		public final static Property Complexity = new Property(3,
				Integer.class, "complexity", false, "COMPLEXITY");
		public final static Property QuestionType = new Property(4,
				Integer.class, "questionType", false, "QUESTION_TYPE");
		public final static Property Option1 = new Property(5, String.class,
				"option1", false, "OPTION1");
		public final static Property Option2 = new Property(6, String.class,
				"option2", false, "OPTION2");
		public final static Property Question = new Property(7, String.class,
				"question", false, "QUESTION");
		public final static Property QuestionName = new Property(8,
				String.class, "questionName", false, "QUESTION_NAME");
		public final static Property Option3 = new Property(9, String.class,
				"option3", false, "OPTION3");
		public final static Property Option4 = new Property(10, String.class,
				"option4", false, "OPTION4");
		public final static Property PostQuestion = new Property(11,
				String.class, "postQuestion", false, "POST_QUESTION");
	};

	public QuestionsDao(DaoConfig config) {
		super(config);
	}

	public QuestionsDao(DaoConfig config, DaoSession daoSession) {
		super(config, daoSession);
	}

	/** Creates the underlying database table. */
	public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "'QUESTIONS' (" + //
				"'STAR_ID' INTEGER," + // 0: starID
				"'ANSWER' INTEGER," + // 1: answer
				"'QUIZ_ID' INTEGER," + // 2: quizID
				"'COMPLEXITY' INTEGER," + // 3: complexity
				"'QUESTION_TYPE' INTEGER," + // 4: questionType
				"'OPTION1' TEXT," + // 5: option1
				"'OPTION2' TEXT," + // 6: option2
				"'QUESTION' TEXT," + // 7: question
				"'QUESTION_NAME' TEXT," + // 8: questionName
				"'OPTION3' TEXT," + // 9: option3
				"'OPTION4' TEXT," + // 10: option4
				"'POST_QUESTION' TEXT);"); // 11: postQuestion
	}

	/** Drops the underlying database table. */
	public static void dropTable(SQLiteDatabase db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "")
				+ "'QUESTIONS'";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt, Questions entity) {
		stmt.clearBindings();

		Integer starID = entity.getStarID();
		if (starID != null) {
			stmt.bindLong(1, starID);
		}

		Integer answer = entity.getAnswer();
		if (answer != null) {
			stmt.bindLong(2, answer);
		}

		Integer quizID = entity.getQuizID();
		if (quizID != null) {
			stmt.bindLong(3, quizID);
		}

		Integer complexity = entity.getComplexity();
		if (complexity != null) {
			stmt.bindLong(4, complexity);
		}

		Integer questionType = entity.getQuestionType();
		if (questionType != null) {
			stmt.bindLong(5, questionType);
		}

		String option1 = entity.getOption1();
		if (option1 != null) {
			stmt.bindString(6, option1);
		}

		String option2 = entity.getOption2();
		if (option2 != null) {
			stmt.bindString(7, option2);
		}

		String question = entity.getQuestion();
		if (question != null) {
			stmt.bindString(8, question);
		}

		String questionName = entity.getQuestionName();
		if (questionName != null) {
			stmt.bindString(9, questionName);
		}

		String option3 = entity.getOption3();
		if (option3 != null) {
			stmt.bindString(10, option3);
		}

		String option4 = entity.getOption4();
		if (option4 != null) {
			stmt.bindString(11, option4);
		}

		String postQuestion = entity.getPostQuestion();
		if (postQuestion != null) {
			stmt.bindString(12, postQuestion);
		}
	}

	/** @inheritdoc */
	@Override
	public Void readKey(Cursor cursor, int offset) {
		return null;
	}

	/** @inheritdoc */
	@Override
	public Questions readEntity(Cursor cursor, int offset) {
		Questions entity = new Questions(
				//
				cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // starID
				cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // answer
				cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // quizID
				cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // complexity
				cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // questionType
				cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // option1
				cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // option2
				cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // question
				cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // questionName
				cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // option3
				cursor.isNull(offset + 10) ? null : cursor
						.getString(offset + 10), // option4
				cursor.isNull(offset + 11) ? null : cursor
						.getString(offset + 11) // postQuestion
		);
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, Questions entity, int offset) {
		entity.setStarID(cursor.isNull(offset + 0) ? null : cursor
				.getInt(offset + 0));
		entity.setAnswer(cursor.isNull(offset + 1) ? null : cursor
				.getInt(offset + 1));
		entity.setQuizID(cursor.isNull(offset + 2) ? null : cursor
				.getInt(offset + 2));
		entity.setComplexity(cursor.isNull(offset + 3) ? null : cursor
				.getInt(offset + 3));
		entity.setQuestionType(cursor.isNull(offset + 4) ? null : cursor
				.getInt(offset + 4));
		entity.setOption1(cursor.isNull(offset + 5) ? null : cursor
				.getString(offset + 5));
		entity.setOption2(cursor.isNull(offset + 6) ? null : cursor
				.getString(offset + 6));
		entity.setQuestion(cursor.isNull(offset + 7) ? null : cursor
				.getString(offset + 7));
		entity.setQuestionName(cursor.isNull(offset + 8) ? null : cursor
				.getString(offset + 8));
		entity.setOption3(cursor.isNull(offset + 9) ? null : cursor
				.getString(offset + 9));
		entity.setOption4(cursor.isNull(offset + 10) ? null : cursor
				.getString(offset + 10));
		entity.setPostQuestion(cursor.isNull(offset + 11) ? null : cursor
				.getString(offset + 11));
	}

	/** @inheritdoc */
	@Override
	protected Void updateKeyAfterInsert(Questions entity, long rowId) {
		// Unsupported or missing PK type
		return null;
	}

	/** @inheritdoc */
	@Override
	public Void getKey(Questions entity) {
		return null;
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

}
