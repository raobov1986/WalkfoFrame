package com.raoul.walkfoframe.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.raoul.walkfoframe.model.WOFStars;
import com.raoul.walkfoframe.database.DaoSession;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;



// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table WOFSTARS.
*/
public class WOFStarsDao extends AbstractDao<WOFStars, Void> {

    public static final String TABLENAME = "WOFSTARS";

    /**
     * Properties of entity WOFStars.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property StarID = new Property(0, Integer.class, "starID", false, "STAR_ID");
        public final static Property StreetNo = new Property(1, String.class, "streetNo", false, "STREET_NO");
        public final static Property StreetName = new Property(2, String.class, "streetName", false, "STREET_NAME");
        public final static Property Longitude = new Property(3, String.class, "longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(4, String.class, "latitude", false, "LATITUDE");
        public final static Property HonoreeID = new Property(5, String.class, "honoreeID", false, "HONOREE_ID");
        public final static Property HonoreeFullName = new Property(6, String.class, "honoreeFullName", false, "HONOREE_FULL_NAME");
        public final static Property CeremonyDate = new Property(7, String.class, "ceremonyDate", false, "CEREMONY_DATE");
        public final static Property Category = new Property(8, String.class, "category", false, "CATEGORY");
    };


    public WOFStarsDao(DaoConfig config) {
        super(config);
    }
    
    public WOFStarsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'WOFSTARS' (" + //
                "'STAR_ID' INTEGER," + // 0: starID
                "'STREET_NO' TEXT," + // 1: streetNo
                "'STREET_NAME' TEXT," + // 2: streetName
                "'LONGITUDE' TEXT," + // 3: longitude
                "'LATITUDE' TEXT," + // 4: latitude
                "'HONOREE_ID' TEXT," + // 5: honoreeID
                "'HONOREE_FULL_NAME' TEXT," + // 6: honoreeFullName
                "'CEREMONY_DATE' TEXT," + // 7: ceremonyDate
                "'CATEGORY' TEXT);"); // 8: category
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'WOFSTARS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, WOFStars entity) {
        stmt.clearBindings();
 
        Integer starID = entity.getStarID();
        if (starID != null) {
            stmt.bindLong(1, starID);
        }
 
        String streetNo = entity.getStreetNo();
        if (streetNo != null) {
            stmt.bindString(2, streetNo);
        }
 
        String streetName = entity.getStreetName();
        if (streetName != null) {
            stmt.bindString(3, streetName);
        }
 
        String longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindString(4, longitude);
        }
 
        String latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindString(5, latitude);
        }
 
        String honoreeID = entity.getHonoreeID();
        if (honoreeID != null) {
            stmt.bindString(6, honoreeID);
        }
 
        String honoreeFullName = entity.getHonoreeFullName();
        if (honoreeFullName != null) {
            stmt.bindString(7, honoreeFullName);
        }
 
        String ceremonyDate = entity.getCeremonyDate();
        if (ceremonyDate != null) {
            stmt.bindString(8, ceremonyDate);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(9, category);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public WOFStars readEntity(Cursor cursor, int offset) {
        WOFStars entity = new WOFStars( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // starID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // streetNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // streetName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // longitude
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // latitude
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // honoreeID
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // honoreeFullName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // ceremonyDate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // category
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, WOFStars entity, int offset) {
        entity.setStarID(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setStreetNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStreetName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLongitude(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLatitude(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHonoreeID(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHonoreeFullName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCeremonyDate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCategory(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(WOFStars entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(WOFStars entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
