package com.raoul.walkfoframe.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.raoul.walkfoframe.model.WOFCouponCat;
import com.raoul.walkfoframe.database.DaoSession;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table WOFCOUPON_CAT.
*/
public class WOFCouponCatDao extends AbstractDao<WOFCouponCat, Void> {

    public static final String TABLENAME = "WOFCOUPON_CAT";

    /**
     * Properties of entity WOFCouponCat.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CouponCatID = new Property(0, String.class, "CouponCatID", false, "COUPON_CAT_ID");
        public final static Property Category = new Property(1, String.class, "Category", false, "CATEGORY");
    };


    public WOFCouponCatDao(DaoConfig config) {
        super(config);
    }
    
    public WOFCouponCatDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'WOFCOUPON_CAT' (" + //
                "'COUPON_CAT_ID' TEXT," + // 0: CouponCatID
                "'CATEGORY' TEXT);"); // 1: Category
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'WOFCOUPON_CAT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, WOFCouponCat entity) {
        stmt.clearBindings();
 
        String CouponCatID = entity.getCouponCatID();
        if (CouponCatID != null) {
            stmt.bindString(1, CouponCatID);
        }
 
        String Category = entity.getCategory();
        if (Category != null) {
            stmt.bindString(2, Category);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public WOFCouponCat readEntity(Cursor cursor, int offset) {
        WOFCouponCat entity = new WOFCouponCat( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // CouponCatID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // Category
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, WOFCouponCat entity, int offset) {
        entity.setCouponCatID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCategory(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(WOFCouponCat entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(WOFCouponCat entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
