package com.raoul.walkfoframe.database;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

import com.raoul.walkfoframe.dao.FavoriteDao;
import com.raoul.walkfoframe.dao.HonoreesandStarDao;
import com.raoul.walkfoframe.dao.QuestionsDao;
import com.raoul.walkfoframe.dao.QuizzesDao;
import com.raoul.walkfoframe.dao.WOFControlDao;
import com.raoul.walkfoframe.dao.WOFCouponCatDao;
import com.raoul.walkfoframe.dao.WOFCouponsDao;
import com.raoul.walkfoframe.dao.WOFMediaDao;
import com.raoul.walkfoframe.dao.WOFStarsDao;
import com.raoul.walkfoframe.dao.WOF_USERDao;
import com.raoul.walkfoframe.dao.WofhonoreesDao;

import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * Master of DAO (schema version 1): knows all DAOs.
 */
public class DaoMaster extends AbstractDaoMaster {
  public static final int SCHEMA_VERSION = 1;

  /** Creates underlying database table using DAOs. */
  public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
    WofhonoreesDao.createTable(db, ifNotExists);
    WOFStarsDao.createTable(db, ifNotExists);
    WOFMediaDao.createTable(db, ifNotExists);
    WOFCouponsDao.createTable(db, ifNotExists);
    QuestionsDao.createTable(db, ifNotExists);
    WOFControlDao.createTable(db, ifNotExists);
    QuizzesDao.createTable(db, ifNotExists);
    WOF_USERDao.createTable(db, ifNotExists);
    FavoriteDao.createTable(db, ifNotExists);
    WOFCouponCatDao.createTable(db, ifNotExists);
    HonoreesandStarDao.createTable(db, ifNotExists);
  }

  /** Drops underlying database table using DAOs. */
  public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
    WofhonoreesDao.dropTable(db, ifExists);
    WOFStarsDao.dropTable(db, ifExists);
    WOFMediaDao.dropTable(db, ifExists);
    WOFCouponsDao.dropTable(db, ifExists);
    QuestionsDao.dropTable(db, ifExists);
    WOFControlDao.dropTable(db, ifExists);
    QuizzesDao.dropTable(db, ifExists);
    WOF_USERDao.dropTable(db, ifExists);
    FavoriteDao.dropTable(db, ifExists);
    WOFCouponCatDao.dropTable(db, ifExists);
    HonoreesandStarDao.dropTable(db, ifExists);
  }

  public static abstract class OpenHelper extends SQLiteOpenHelper {

    public OpenHelper(Context context, String name, CursorFactory factory) {
      super(context, name, factory, SCHEMA_VERSION);
    }

    @Override
    public void onCreate(SQLiteDatabase db) {
      Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
      createAllTables(db, false);
    }
  }

  /** WARNING: Drops all table on Upgrade! Use only during development. */
  public static class DevOpenHelper extends OpenHelper {
    public DevOpenHelper(Context context, String name, CursorFactory factory) {
      super(context, name, factory);
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
      Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion
          + " by dropping all tables");
      dropAllTables(db, true);
      onCreate(db);
    }
  }

  public DaoMaster(SQLiteDatabase db) {
    super(db, SCHEMA_VERSION);
    registerDaoClass(WofhonoreesDao.class);
    registerDaoClass(WOFStarsDao.class);
    registerDaoClass(WOFMediaDao.class);
    registerDaoClass(WOFCouponsDao.class);
    registerDaoClass(QuestionsDao.class);
    registerDaoClass(WOFControlDao.class);
    registerDaoClass(QuizzesDao.class);
    registerDaoClass(WOF_USERDao.class);
    registerDaoClass(FavoriteDao.class);
    registerDaoClass(WOFCouponCatDao.class);
    registerDaoClass(HonoreesandStarDao.class);
  }

  public DaoSession newSession() {
    return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
  }

  public DaoSession newSession(IdentityScopeType type) {
    return new DaoSession(db, type, daoConfigMap);
  }

}
